// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ReactQueryApi.Models;

namespace ReactQueryApi.Data
{
    public partial class ReactQueryContext : DbContext
    {
        public ReactQueryContext()
        {
        }

        public ReactQueryContext(DbContextOptions<ReactQueryContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Contact>(entity =>
            {
                entity.ToTable("Contact");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.PhoneNumber).HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.ContactCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("FK_Contact_User1");

                entity.HasOne(d => d.Title)
                    .WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.TitleId)
                    .HasConstraintName("FK_Contact_Title");

                entity.HasOne(d => d.UpdatedUser)
                    .WithMany(p => p.ContactUpdatedUsers)
                    .HasForeignKey(d => d.UpdatedUserId)
                    .HasConstraintName("FK_Contact_User");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.HasIndex(e => e.CreatedUserId);

                entity.HasIndex(e => e.ProductGroupId)
                    .HasName("IX_Product_GroupId");

                entity.HasIndex(e => e.UpdatedUserId);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("decimal(12, 6)");

                entity.Property(e => e.Stock).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.ProductCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("FK_Product_User");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductGroupId)
                    .HasConstraintName("FK_Product_ProductGroup");

                entity.HasOne(d => d.UpdatedUser)
                    .WithMany(p => p.ProductUpdatedUsers)
                    .HasForeignKey(d => d.UpdatedUserId)
                    .HasConstraintName("FK_Product_User1");
            });

            modelBuilder.Entity<ProductGroup>(entity =>
            {
                entity.ToTable("ProductGroup");

                entity.HasIndex(e => e.CreatedUserId);

                entity.HasIndex(e => e.UpdatedUserId);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.ProductGroupCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("FK_ProductGroup_User");

                entity.HasOne(d => d.UpdatedUser)
                    .WithMany(p => p.ProductGroupUpdatedUsers)
                    .HasForeignKey(d => d.UpdatedUserId)
                    .HasConstraintName("FK_ProductGroup_User1");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role", "auth");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Title>(entity =>
            {
                entity.ToTable("Title");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedUser)
                    .WithMany(p => p.TitleCreatedUsers)
                    .HasForeignKey(d => d.CreatedUserId)
                    .HasConstraintName("FK_Title_User");

                entity.HasOne(d => d.UpdatedUser)
                    .WithMany(p => p.TitleUpdatedUsers)
                    .HasForeignKey(d => d.UpdatedUserId)
                    .HasConstraintName("FK_Title_User1");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User", "auth");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.PasswordHash).IsRequired();

                entity.Property(e => e.PasswordSalt).IsRequired();

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.ToTable("UserRole", "auth");

                entity.HasIndex(e => e.RoleId);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}